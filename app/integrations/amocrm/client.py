"""HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è amoCRM API."""
import asyncio
from typing import Any

import httpx
from loguru import logger

from app.core.config import get_settings
from app.integrations.amocrm.auth import auth_manager
from app.integrations.amocrm.models import (
    AmoCRMContact,
    AmoCRMLead,
    AmoCRMNote,
)


class AmoCRMAPIError(Exception):
    """–ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ amoCRM API."""

    pass


class AmoCRMRateLimitError(AmoCRMAPIError):
    """–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤."""

    pass


class AmoCRMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å amoCRM API."""

    MAX_RETRIES = 3
    RETRY_DELAY = 2.0  # —Å–µ–∫—É–Ω–¥—ã

    def __init__(self) -> None:
        self.settings = get_settings()
        self.base_url = f"https://{self.settings.amocrm_subdomain}.amocrm.ru/api/v4"

    async def create_lead(
        self,
        name: str,
        price: int | None = None,
        contact_id: int | None = None,
        pipeline_id: int | None = None,
        status_id: int | None = None,
        responsible_user_id: int | None = None,
        custom_fields: list[dict] | None = None,
    ) -> int:
        """–°–æ–∑–¥–∞—ë—Ç –ª–∏–¥ –≤ amoCRM."""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ '%s' (—Ü–µ–Ω–∞: %s)", name, price)

        payload = {
            "name": name,
        }

        if price is not None:
            payload["price"] = price

        if pipeline_id is not None:
            payload["pipeline_id"] = pipeline_id

        if status_id is not None:
            payload["status_id"] = status_id

        if responsible_user_id is not None:
            payload["responsible_user_id"] = responsible_user_id

        if custom_fields:
            payload["custom_fields_values"] = custom_fields

        if contact_id:
            payload["_embedded"] = {"contacts": [{"id": contact_id}]}
            
        import json
        logger.info(f"=== PAYLOAD –î–õ–Ø AMOCRM ===")
        logger.info(f"Full payload: {json.dumps([payload], indent=2, ensure_ascii=False)}")
        logger.info(f"custom_fields_values: {payload.get('custom_fields_values')}")
        logger.info(f"=========================")

        response = await self._request("POST", "/leads", json=[payload])

        lead_id = response["_embedded"]["leads"][0]["id"]
        logger.info("‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω: ID=%d", lead_id)

        return lead_id

    async def update_lead_status(
        self,
        lead_id: int,
        status_id: int,
        pipeline_id: int | None = None,
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –≤ amoCRM.

        Args:
            lead_id: ID –ª–∏–¥–∞
            status_id: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            pipeline_id: ID –≤–æ—Ä–æ–Ω–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞ %s ‚Üí status_id=%s", lead_id, status_id)

        payload = {
            "id": lead_id,
            "status_id": status_id,
        }

        if pipeline_id is not None:
            payload["pipeline_id"] = pipeline_id

        try:
            response = await self._request("PATCH", "/leads", json=[payload])

            if response and "_embedded" in response:
                logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ %s –æ–±–Ω–æ–≤–ª—ë–Ω ‚Üí %s", lead_id, status_id)
                return True

            logger.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–¥–∞: %s", response)
            return False

        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞ %s: %s", lead_id, exc)
            return False

    async def create_contact(
        self,
        name: str,
        phone: str | None = None,
        email: str | None = None,
        custom_fields: list[dict] | None = None,
    ) -> int:
        """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ amoCRM."""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ '%s'", name)

        payload = {
            "name": name,
        }

        custom_fields_values = custom_fields or []

        if phone:
            custom_fields_values.append(
                {
                    "field_code": "PHONE",
                    "values": [{"value": phone}],  # –£–±—Ä–∞–ª–∏ enum_code
                }
            )

        if email:
            custom_fields_values.append(
                {
                    "field_code": "EMAIL",
                    "values": [{"value": email}],  # –£–±—Ä–∞–ª–∏ enum_code
                }
            )

        if custom_fields_values:
            payload["custom_fields_values"] = custom_fields_values

        response = await self._request("POST", "/contacts", json=[payload])

        contact_id = response["_embedded"]["contacts"][0]["id"]
        logger.info("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: ID=%d", contact_id)

        return contact_id

    async def add_note(
        self,
        entity_id: int,
        entity_type: str = "leads",
        note_type: str = "common",
        text: str = "",
    ) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Å—É—â–Ω–æ—Å—Ç–∏.

        Args:
            entity_id: ID –ª–∏–¥–∞/–∫–æ–Ω—Ç–∞–∫—Ç–∞
            entity_type: "leads" –∏–ª–∏ "contacts"
            note_type: —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏ (–æ–±—ã—á–Ω–æ "common")
            text: —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
        """
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ %s/%s", entity_type, entity_id)

        payload = {
            "entity_id": entity_id,
            "note_type": note_type,
            "params": {"text": text},
        }

        try:
            response = await self._request(
                "POST",
                f"/{entity_type}/notes",
                json=[payload],
            )
            if response and "_embedded" in response:
                logger.info("‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ %s/%s", entity_type, entity_id)
                return True

            logger.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: %s", response)
            return False

        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: %s", exc)
            return False

    async def get_lead(self, lead_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏–¥ –ø–æ ID."""
        logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–∞ ID=%d", lead_id)
        return await self._request("GET", f"/leads/{lead_id}")

    async def find_contact_by_phone(self, phone: str) -> int | None:
        """
        –ò—â–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–µ custom_fields_values.

        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: telegram_user_477811332)

        Returns:
            ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ None
        """
        try:
            logger.info(f"–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}")

            response = await self._request(
                "GET",
                "/contacts",
                params={"query": phone, "limit": 10},
            )

            # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è response
            logger.debug(f"API –æ—Ç–≤–µ—Ç: {response}")

            contacts = response.get("_embedded", {}).get("contacts") if response else None

            # –î–æ–±–∞–≤—å
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç API: {len(contacts) if contacts else 0}")

            if contacts:
                for contact in contacts:
                    custom_fields = contact.get("custom_fields_values", [])

                    for field in custom_fields:
                        if field.get("field_code") == "PHONE":
                            values = field.get("values", [])

                            for value in values:
                                if phone in value.get("value", ""):
                                    contact_id = contact["id"]
                                    logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω: contact_id={contact_id}")
                                    return contact_id

            logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        except Exception as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {exc}")
            return None

    async def get_contact_from_lead(self, lead_id: int) -> int | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ –ª–∏–¥–∞.

        Args:
            lead_id: ID –ª–∏–¥–∞

        Returns:
            ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ None
        """
        try:
            lead = await self.get_lead(lead_id)

            if lead and "_embedded" in lead and "contacts" in lead["_embedded"]:
                contacts = lead["_embedded"]["contacts"]
                if contacts:
                    contact_id = contacts[0]["id"]
                    logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {contact_id} –ø–æ–ª—É—á–µ–Ω –∏–∑ –ª–∏–¥–∞ {lead_id}")
                    return contact_id

            logger.warning(f"–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏–¥–µ {lead_id}")
            return None

        except Exception as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ –ª–∏–¥–∞: {exc}")
            return None

    async def find_leads_by_contact(
        self,
        contact_id: int,
        pipeline_id: int | None = None,
    ) -> list[dict]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É.

        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
            pipeline_id: –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ—Ä–æ–Ω–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            logger.info("–ü–æ–∏—Å–∫ –ª–∏–¥–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: %s", contact_id)

            params: dict[str, int] | dict[str, int | None] = {"filter[contacts]": contact_id}
            if pipeline_id:
                params["filter[pipeline_id]"] = pipeline_id

            response = await self._request("GET", "/leads", params=params)

            leads = response.get("_embedded", {}).get("leads") if response else None
            if leads:
                active_leads = [
                    {
                        "id": lead["id"],
                        "status_id": lead["status_id"],
                        "pipeline_id": lead["pipeline_id"],
                        "name": lead.get("name", ""),
                    }
                    for lead in leads
                    if lead.get("status_id") not in [142, 143]
                ]
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ %s –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–¥–æ–≤", len(active_leads))
                return active_leads

            logger.info("–õ–∏–¥—ã –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", contact_id)
            return []

        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤: %s", exc)
            return []

    async def get_lead_notes(
        self,
        lead_id: int,
        limit: int = 20,
    ) -> list[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ª–∏–¥–∞.

        Args:
            lead_id: ID –ª–∏–¥–∞
            limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–º–µ—Ç–æ–∫
        """
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ª–∏–¥–∞ %s", lead_id)

            response = await self._request(
                "GET",
                f"/leads/{lead_id}/notes",
                params={"limit": limit},
            )

            notes = response.get("_embedded", {}).get("notes") if response else None
            if not notes:
                logger.info("–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –ª–∏–¥–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", lead_id)
                return []

            result: list[dict] = []
            for note in notes:
                if note.get("note_type") == "common":
                    result.append(
                        {
                            "id": note.get("id"),
                            "text": note.get("params", {}).get("text", ""),
                            "created_at": note.get("created_at", 0),
                        }
                    )

            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %s –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ª–∏–¥–∞ %s", len(result), lead_id)
            return result

        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–æ–∫: %s", exc)
            return []

    async def _request(
        self,
        method: str,
        endpoint: str,
        json: Any | None = None,
        params: dict | None = None,
        retry: int = 0,
    ) -> dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ retry."""
        token = await auth_manager.get_access_token()

        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
        }

        url = f"{self.base_url}{endpoint}"

        try:
            async with httpx.AsyncClient() as client:
                response = await client.request(
                    method,
                    url,
                    headers=headers,
                    json=json,
                    params=params,
                    timeout=30.0,
                )

            # 401 - —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
            if response.status_code == 401 and retry < 1:
                logger.warning("amoCRM 401: —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å")
                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Ç–æ–∫–µ–Ω–æ–≤
                from app.core.cache import redis_client

                await redis_client.delete("amocrm:tokens")
                return await self._request(method, endpoint, json, params, retry + 1)

            # 429 - rate limit
            if response.status_code == 429:
                if retry < self.MAX_RETRIES:
                    delay = self.RETRY_DELAY * (2**retry)  # exponential backoff
                    logger.warning(
                        "amoCRM rate limit, –∂–¥—ë–º %.1f —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ %d/%d)",
                        delay,
                        retry + 1,
                        self.MAX_RETRIES,
                    )
                    await asyncio.sleep(delay)
                    return await self._request(method, endpoint, json, params, retry + 1)
                else:
                    raise AmoCRMRateLimitError("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ amoCRM")

            response.raise_for_status()
            return response.json()

        except httpx.HTTPStatusError as exc:
            logger.error("amoCRM API –æ—à–∏–±–∫–∞ %d: %s", exc.response.status_code, exc.response.text)
            raise AmoCRMAPIError(f"HTTP {exc.response.status_code}: {exc.response.text}")

        except httpx.RequestError as exc:
            logger.error("amoCRM –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: %s", str(exc))
            if retry < self.MAX_RETRIES:
                delay = self.RETRY_DELAY * (2**retry)
                logger.info("–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %.1f —Å–µ–∫", delay)
                await asyncio.sleep(delay)
                return await self._request(method, endpoint, json, params, retry + 1)
            raise AmoCRMAPIError(f"Request error: {str(exc)}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å
amocrm_client = AmoCRMClient()


async def get_amocrm_client() -> AmoCRMClient:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å amoCRM –∫–ª–∏–µ–Ω—Ç–∞."""
    return amocrm_client
