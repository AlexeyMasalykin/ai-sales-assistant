"""OAuth 2.0 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è amoCRM."""
import asyncio

import httpx
from loguru import logger

from app.core.cache import redis_client
from app.core.config import get_settings
from app.integrations.amocrm.models import AmoCRMTokens


class AmoCRMAuthManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ amoCRM."""

    REDIS_KEY = "amocrm:tokens"
    TOKEN_TTL = 86400  # 24 —á–∞—Å–∞

    def __init__(self) -> None:
        self.settings = get_settings()
        self._lock = asyncio.Lock()
        self._base_url = f"https://{self.settings.amocrm_subdomain}.amocrm.ru"

    async def get_access_token(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π access token (–∏–∑ –∫–µ—à–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç)."""
        async with self._lock:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis
            cached = await self._get_cached_tokens()

            if cached and not cached.is_expired():
                logger.debug("–ò—Å–ø–æ–ª—å–∑—É–µ–º cached amoCRM —Ç–æ–∫–µ–Ω")
                return cached.access_token

            # –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if cached and cached.refresh_token:
                logger.info("amoCRM —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ refresh_token")
                tokens = await self._refresh_tokens(cached.refresh_token)
            else:
                logger.warning("amoCRM —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç –≤ –∫–µ—à–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–≤–∏—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                raise ValueError(
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–≤–∏—á–Ω–∞—è OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. "
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ: {self._base_url}/oauth?client_id={self.settings.amocrm_client_id}&"
                    f"redirect_uri={self.settings.amocrm_redirect_uri}&response_type=code"
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            await self._cache_tokens(tokens)

            return tokens.access_token

    async def exchange_code_for_tokens(self, code: str) -> AmoCRMTokens:
        """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç authorization code –Ω–∞ —Ç–æ–∫–µ–Ω—ã (–ø–µ—Ä–≤–∏—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)."""
        logger.info("üîÑ –û–±–º–µ–Ω authorization code –Ω–∞ —Ç–æ–∫–µ–Ω—ã")
        logger.debug("Code (–ø–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤): %s...", code[:30])

        token_url = f"{self._base_url}/oauth2/access_token"
        payload = {
            "client_id": self.settings.amocrm_client_id,
            "client_secret": self.settings.amocrm_client_secret.get_secret_value(),
            "grant_type": "authorization_code",
            "code": code,
            "redirect_uri": self.settings.amocrm_redirect_uri,
        }

        logger.debug("Token URL: %s", token_url)
        logger.debug("Redirect URI: %s", self.settings.amocrm_redirect_uri)
        logger.debug("Client ID: %s", self.settings.amocrm_client_id)

        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    token_url,
                    json=payload,
                    timeout=30.0,
                )

                logger.info("amoCRM token response status: %s", response.status_code)

                if response.status_code != 200:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: %s", response.status_code)
                    logger.error("Response body: %s", response.text[:500])
                    response.raise_for_status()

                data = response.json()
                logger.debug("Response data keys: %s", list(data.keys()))

            tokens = AmoCRMTokens(**data)
            logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã")
            logger.debug("Access token –¥–ª–∏–Ω–∞: %s", len(tokens.access_token))
            logger.debug("Refresh token –¥–ª–∏–Ω–∞: %s", len(tokens.refresh_token) if tokens.refresh_token else 0)
            logger.debug("Expires in: %s —Å–µ–∫—É–Ω–¥", tokens.expires_in)

            await self._cache_tokens(tokens)

            logger.info("‚úÖ amoCRM —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis")
            return tokens

        except httpx.HTTPStatusError as exc:
            logger.error("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ code –Ω–∞ —Ç–æ–∫–µ–Ω—ã: %s", exc)
            logger.error("Response: %s", exc.response.text[:500])
            raise
        except Exception as exc:
            logger.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ code –Ω–∞ —Ç–æ–∫–µ–Ω—ã: %s", exc)
            logger.exception(exc)
            raise

    async def _refresh_tokens(self, refresh_token: str) -> AmoCRMTokens:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ refresh_token."""
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self._base_url}/oauth2/access_token",
                json={
                    "client_id": self.settings.amocrm_client_id,
                    "client_secret": self.settings.amocrm_client_secret.get_secret_value(),
                    "grant_type": "refresh_token",
                    "refresh_token": refresh_token,
                    "redirect_uri": self.settings.amocrm_redirect_uri,
                },
                timeout=30.0,
            )
            response.raise_for_status()
            data = response.json()

        logger.info("‚úÖ amoCRM —Ç–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return AmoCRMTokens(**data)

    async def _get_cached_tokens(self) -> AmoCRMTokens | None:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ Redis."""
        data = await redis_client.get(self.REDIS_KEY)
        if not data:
            return None

        import json

        tokens_dict = json.loads(data)
        return AmoCRMTokens(**tokens_dict)

    async def _cache_tokens(self, tokens: AmoCRMTokens) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ Redis."""
        import json

        await redis_client.setex(
            self.REDIS_KEY,
            self.TOKEN_TTL,
            json.dumps(tokens.model_dump(mode="json")),
        )
        logger.debug("amoCRM —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis (TTL: %d —Å–µ–∫)", self.TOKEN_TTL)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å
auth_manager = AmoCRMAuthManager()
