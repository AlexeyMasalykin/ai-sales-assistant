"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram."""

from __future__ import annotations

from typing import Dict, Optional

from loguru import logger

from app.services.documents.generator import document_generator
from app.services.rag.answer import answer_generator
from app.services.web.chat_session import session_manager


class TelegramHandlers:
    """–ö–æ–º–∞–Ω–¥–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞."""

    @staticmethod
    async def handle_start(chat_id: int, user_name: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
        logger.info("Telegram: –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç %s (chat_id=%s)", user_name, chat_id)
        return (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user_name}!</b>\n\n"
            "–Ø ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.\n\n"
            "<b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
            "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º\n"
            "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞\n"
            "‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/services ‚Äî –Ω–∞—à–∏ —É—Å–ª—É–≥–∏\n"
            "/price ‚Äî —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
            "/price_list ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å\n"
            "/proposal ‚Äî –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n\n"
            "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –æ—Ç–≤–µ—á—É!"
        )

    @staticmethod
    async def handle_help(chat_id: int) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""
        logger.info("Telegram: –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç chat_id=%s", chat_id)
        return (
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/services ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥\n"
            "/price ‚Äî —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
            "/price_list ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å\n"
            "/proposal ‚Äî –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
            "/contact ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n"
            "/cases ‚Äî –Ω–∞—à–∏ –∫–µ–π—Å—ã\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
        )

    @staticmethod
    async def handle_services(chat_id: int) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /services."""
        logger.info("Telegram: –∫–æ–º–∞–Ω–¥–∞ /services –æ—Ç chat_id=%s", chat_id)
        return (
            "üöÄ <b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n\n"
            "<b>1. –ò–ò-–ú–µ–Ω–µ–¥–∂–µ—Ä</b>\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –ò–ò\n"
            "‚Ä¢ Avito, Telegram, WhatsApp\n"
            "‚Ä¢ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤\n"
            "‚Ä¢ –û—Ç 50,000 ‚ÇΩ\n\n"
            "<b>2. –ò–ò-–ê–Ω–∞–ª–∏—Ç–∏–∫</b>\n"
            "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –û—Ç—á—ë—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n"
            "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞\n"
            "‚Ä¢ –û—Ç 80,000 ‚ÇΩ\n\n"
            "<b>3. –ò–ò-–î–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥</b>\n"
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä—ã, –ö–ü\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞\n"
            "‚Ä¢ –û—Ç 60,000 ‚ÇΩ\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–∞—è —É—Å–ª—É–≥–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ!"
        )

    @staticmethod
    async def handle_price(chat_id: int) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /price."""
        logger.info("Telegram: –∫–æ–º–∞–Ω–¥–∞ /price –æ—Ç chat_id=%s", chat_id)
        return (
            "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b>\n\n"
            "üì¶ <b>–°—Ç–∞—Ä—Ç</b> ‚Äî –æ—Ç 50,000 ‚ÇΩ\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n"
            "‚Ä¢ 1 –∫–∞–Ω–∞–ª (Avito/Telegram)\n"
            "‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 1 –º–µ—Å—è—Ü\n\n"
            "üöÄ <b>–û–ø—Ç–∏–º—É–º</b> ‚Äî –æ—Ç 150,000 ‚ÇΩ\n"
            "‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n"
            "‚Ä¢ 3 –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ RAG —Å–∏—Å—Ç–µ–º–∞\n"
            "‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 3 –º–µ—Å—è—Ü–∞\n\n"
            "‚≠ê <b>Enterprise</b> ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ\n"
            "‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n"
            "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª—é–±—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö ‚Äî –ø–æ–¥–±–µ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!"
        )

    @staticmethod
    async def handle_generate_price(chat_id: int, user_name: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price_list."""
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –¥–ª—è %s (chat_id=%s)", user_name, chat_id)

        html = await document_generator.generate_price_list(
            client_name=user_name, services=None
        )

        text = html.replace("<table>", "\n").replace("</table>", "\n")
        text = text.replace("<tr>", "").replace("</tr>", "\n")
        text = text.replace("<td>", " ").replace("</td>", " | ")

        return (
            f"<b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</b>\n\n{text[:1000]}\n\n"
            f"üíæ –ü–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –≤—ã—à–ª—é —Ñ–∞–π–ª–æ–º."
        )

    @staticmethod
    async def handle_generate_proposal(
        chat_id: int,
        user_name: str,
        company: str = "",
        services: str = "",
    ) -> str:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /proposal."""
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–ü –¥–ª—è %s (chat_id=%s)", user_name, chat_id)

        client_data: Dict[str, Optional[str]] = {
            "name": user_name,
            "company": company,
            "services": services or "AI –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
        }

        html = await document_generator.generate_commercial_proposal(client_data)

        from app.services.telegram.lead_service import telegram_lead_service

        lead_result = await telegram_lead_service.create_lead_from_conversation(
            chat_id=chat_id,
            user_name=user_name,
            product_interest=services or "AI –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
            conversation_context=f"–ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {company or '–∫–æ–º–ø–∞–Ω–∏–∏'}",
        )

        if lead_result and lead_result.success:
            logger.info("‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è %s: lead_id=%s", user_name, lead_result.lead_id)

        return (
            "<b>‚úÖ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>\n\n"
            f"–°–æ–∑–¥–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ö–ü –¥–ª—è {company or '–≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏'}.\n\n"
            f"üìÑ –û–±—ä—ë–º: ~{len(html)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            "üíæ –û—Ç–ø—Ä–∞–≤–ª—é –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–æ–º.\n\n"
            "‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ CRM!</b> –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!"
        )

    @staticmethod
    async def handle_contact(chat_id: int, user_name: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /contact."""
        logger.info("–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç %s (chat_id=%s)", user_name, chat_id)

        from app.services.telegram.lead_service import telegram_lead_service

        lead_result = await telegram_lead_service.create_lead_from_conversation(
            chat_id=chat_id,
            user_name=user_name,
            product_interest="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
            conversation_context="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã —á–µ—Ä–µ–∑ /contact",
        )

        if lead_result and lead_result.success:
            logger.info("‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è %s: lead_id=%s", user_name, lead_result.lead_id)

        return (
            "üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</b>\n\n"
            "<b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> –ê–ª–µ–∫—Å–µ–π\n"
            "<b>Telegram:</b> @your_manager_username\n"
            "<b>Email:</b> sales@yourcompany.com\n"
            "<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (XXX) XXX-XX-XX\n\n"
            "‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b> –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.\n\n"
            f"{user_name}, —á–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å? üòä"
        )

    @staticmethod
    async def handle_cases(chat_id: int) -> str:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cases."""
        logger.info("–ó–∞–ø—Ä–æ—Å –∫–µ–π—Å–æ–≤ –æ—Ç —á–∞—Ç–∞ %s", chat_id)

        try:
            from app.services.rag.search import (
                document_search,
            )  # noqa: WPS433 (local import for async context)

            docs = await document_search.search("–∫–µ–π—Å—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç—ã", limit=1)
        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤: %s", exc)
            docs = []

        if docs:
            cases_content = docs[0].get("content", "")
            return (
                "üèÜ <b>–ù–∞—à–∏ —É—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã</b>\n\n"
                f"{cases_content[:800]}...\n\n"
                "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ª—é–±–æ–º –∫–µ–π—Å–µ?\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å!"
            )

        return (
            "üèÜ <b>–ù–∞—à–∏ –∫–µ–π—Å—ã</b>\n\n"
            "–£ –Ω–∞—Å –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –≤–Ω–µ–¥—Ä–µ–Ω–∏–π!\n"
            '–ù–∞–ø–∏—à–∏—Ç–µ "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–µ–π—Å—ã" –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.'
        )

    @staticmethod
    async def handle_unknown_command(chat_id: int, command: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
        logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s –æ—Ç —á–∞—Ç–∞ %s", command, chat_id)

        return (
            f"‚ùì –ö–æ–º–∞–Ω–¥–∞ <code>{command}</code> –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/help ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
            "/services ‚Äî –Ω–∞—à–∏ —É—Å–ª—É–≥–∏\n"
            "/price ‚Äî —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
            "/contact ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
        )

    @staticmethod
    async def handle_text_message(chat_id: int, text: str, user_name: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Redis."""
        logger.info(
            "Telegram: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (chat_id=%s): %s",
            user_name,
            chat_id,
            text[:50],
        )

        session_id = await session_manager.get_or_create_telegram_session(
            chat_id,
            user_name,
        )

        await session_manager.add_message(session_id, "user", text)

        context = await session_manager.get_context_for_llm(session_id, limit=5)

        from app.services.telegram.lead_service import telegram_lead_service

        if telegram_lead_service.should_create_lead(text):
            logger.info("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç %s", user_name)

            product_interest = telegram_lead_service.extract_product_from_context(context)
            conversation_summary = "\n".join(
                f"{msg.get('role')}: {msg.get('content', '')[:100]}"
                for msg in context[-3:]
            )

            lead_result = await telegram_lead_service.create_lead_from_conversation(
                chat_id=chat_id,
                user_name=user_name,
                product_interest=product_interest,
                conversation_context=conversation_summary,
            )

            if lead_result and lead_result.success:
                logger.info(
                    "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–∏–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è %s: lead_id=%s",
                    user_name,
                    lead_result.lead_id,
                )

        answer = await answer_generator.generate_answer_with_context(
            text,
            user_name,
            context,
        )

        await session_manager.add_message(session_id, "assistant", answer)

        return answer
