"""Telegram Bot –∫–ª–∏–µ–Ω—Ç."""

from __future__ import annotations

from typing import Any

import httpx
from loguru import logger

from app.core.settings import settings


class TelegramBot:
    """–ö–ª–∏–µ–Ω—Ç Telegram Bot API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π webhook."""

    def __init__(self) -> None:
        self.token = settings.telegram_bot_token.get_secret_value()
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.webhook_url = settings.telegram_webhook_url
        self.client: httpx.AsyncClient | None = None

    async def start(self) -> None:
        """–°–æ–∑–¥–∞—ë—Ç HTTP –∫–ª–∏–µ–Ω—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook."""
        if self.client is not None:
            logger.debug("Telegram Bot —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            return

        self.client = httpx.AsyncClient(timeout=30.0)
        await self.set_webhook(f"{self.webhook_url}/api/v1/webhooks/telegram")
        await self.set_bot_commands()
        logger.info("Telegram Bot –∑–∞–ø—É—â–µ–Ω.")

    async def stop(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        if self.client:
            await self.client.aclose()
            self.client = None
        logger.info("Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def set_webhook(self, url: str) -> dict[str, Any]:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook URL –≤ Telegram."""
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                f"{self.base_url}/setWebhook",
                json={"url": url},
            )
            result = response.json()

        if result.get("ok"):
            logger.info("Webhook Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", url)
        else:
            logger.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook Telegram: %s", result)
        return result

    async def send_message(
        self,
        chat_id: int,
        text: str,
        parse_mode: str = "HTML",
    ) -> dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç Telegram."""
        if not self.client:
            raise RuntimeError("Telegram Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

        try:
            response = await self.client.post(
                f"{self.base_url}/sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": parse_mode,
                },
            )
            result = response.json()
        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram: {}", exc)
            raise

        if result.get("ok"):
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %s.", chat_id)
        else:
            logger.error("Telegram –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: %s", result)
        return result

    async def set_bot_commands(self) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
        if not self.client:
            return

        commands = [
            {"command": "start", "description": "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"},
            {"command": "help", "description": "‚ùì –ü–æ–º–æ—â—å"},
            {"command": "services", "description": "üìã –ù–∞—à–∏ —É—Å–ª—É–≥–∏"},
            {"command": "price", "description": "üí∞ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"},
            {"command": "price_list", "description": "üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–∞–π—Å"},
            {"command": "proposal", "description": "üìù –ó–∞–∫–∞–∑–∞—Ç—å –ö–ü"},
            {"command": "contact", "description": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"},
            {"command": "cases", "description": "üèÜ –ù–∞—à–∏ –∫–µ–π—Å—ã"},
        ]

        try:
            response = await self.client.post(
                f"{self.base_url}/setMyCommands", json={"commands": commands}
            )
            data = response.json()
            if data.get("ok"):
                logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é: %s", exc)


# Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_bot = TelegramBot()
