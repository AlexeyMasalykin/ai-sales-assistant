"""–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–æ–≤ –∏–∑ Avito –¥–∏–∞–ª–æ–≥–æ–≤."""
from __future__ import annotations

import json
from typing import Any

import httpx
from loguru import logger

from app.core.redis_client import get_redis_client
from app.core.settings import settings
from app.models.crm import LeadCreateResult


class AvitoLeadService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–æ–≤ –≤ amoCRM –∏–∑ Avito."""

    CONTACT_CACHE_TTL = 86400 * 30  # 30 –¥–Ω–µ–π

    def __init__(self) -> None:
        self.api_base_url = settings.api_base_url or "https://smmassistant.online"
        self.service_token = settings.avito_bot_service_token
        self.lead_cache_ttl = settings.avito_lead_cache_ttl

    async def _get_lead_cache_key(self, chat_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è –ª–∏–¥–∞ Avito —á–∞—Ç–∞."""
        return f"avito:lead_created:{chat_id}"

    async def _is_lead_already_created(
        self,
        chat_id: str,
    ) -> tuple[bool, int | None, int | None]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω –ª–∏–¥ –¥–ª—è —ç—Ç–æ–≥–æ Avito —á–∞—Ç–∞."""
        redis = await get_redis_client()
        cache_key = await self._get_lead_cache_key(chat_id)

        try:
            cached_data = await redis.get(cache_key)
            if cached_data:
                if isinstance(cached_data, bytes):
                    cached_data = cached_data.decode()
                data = json.loads(cached_data)
                lead_id = data.get("lead_id")
                status_id = data.get("status_id")
                logger.info(
                    "‚ö†Ô∏è  –õ–∏–¥ –¥–ª—è Avito chat_id=%s —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: lead_id=%s, status_id=%s",
                    chat_id,
                    lead_id,
                    status_id,
                )
                return (
                    True,
                    int(lead_id) if lead_id is not None else None,
                    int(status_id) if status_id is not None else None,
                )
            return False, None, None
        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ Avito –ª–∏–¥–∞: %s", exc)
            return False, None, None

    async def _cache_created_lead(
        self,
        chat_id: str,
        lead_id: int,
        status_id: int,
        contact_id: int | None = None,
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ª–∏–¥–µ –≤ Redis."""
        redis = await get_redis_client()
        cache_key = await self._get_lead_cache_key(chat_id)

        try:
            cache_payload = {"lead_id": lead_id, "status_id": status_id}
            if contact_id:
                cache_payload["contact_id"] = contact_id

            cache_data = json.dumps(cache_payload)
            await redis.setex(cache_key, self.lead_cache_ttl, cache_data)
            logger.info(
                "‚úÖ Avito –ª–∏–¥ %s –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è chat_id=%s (status_id=%s, TTL: %sh)",
                lead_id,
                chat_id,
                status_id,
                self.lead_cache_ttl // 3600,
            )
        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Avito –ª–∏–¥–∞: %s", exc)
            return

        if contact_id:
            await self._cache_contact_id(chat_id=chat_id, contact_id=contact_id)

    async def _cache_contact_id(
        self,
        chat_id: str,
        contact_id: int | str | None,
    ) -> None:
        """–ö—ç—à–∏—Ä—É–µ—Ç contact_id –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ Avito –¥–∏–∞–ª–æ–≥–æ–≤."""
        if not contact_id:
            return

        try:
            redis = await get_redis_client()
            contact_cache_key = f"avito:contact_id:{chat_id}"
            await redis.setex(contact_cache_key, self.CONTACT_CACHE_TTL, str(contact_id))
            logger.info(
                "‚úÖ Avito contact_id %s –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è chat_id=%s",
                contact_id,
                chat_id,
            )
        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Avito contact_id: %s", exc)

    async def save_conversation_to_amocrm(
        self,
        lead_id: int,
        user_message: str,
        bot_response: str | None = None,
        qualification: Any | None = None,
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ amoCRM."""
        from app.integrations.amocrm.client import get_amocrm_client

        try:
            amocrm_client = await get_amocrm_client()

            note_parts = [f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}"]

            if qualification:
                note_parts.append(
                    f"\nüìä –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {qualification.stage} "
                    f"({qualification.temperature}, confidence: {qualification.confidence:.2f})"
                )
                if getattr(qualification, "reasoning", None):
                    note_parts.append(f"üí≠ Reasoning: {qualification.reasoning}")

            if bot_response:
                short_response = (
                    f"{bot_response[:300]}..." if len(bot_response) > 300 else bot_response
                )
                note_parts.append(f"\nü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {short_response}")

            note_text = "\n".join(note_parts)

            success = await amocrm_client.add_note(
                entity_id=lead_id,
                entity_type="leads",
                note_type="common",
                text=note_text,
            )

            if success:
                logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—è Avito —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ amoCRM –¥–ª—è –ª–∏–¥–∞ %s", lead_id)
            else:
                logger.warning(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å Avito –∏—Å—Ç–æ—Ä–∏—é –≤ amoCRM –¥–ª—è –ª–∏–¥–∞ %s",
                    lead_id,
                )

            return success

        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Avito –∏—Å—Ç–æ—Ä–∏–∏ –≤ amoCRM: %s", exc)
            return False

    async def create_lead_from_conversation(
        self,
        chat_id: str,
        user_name: str,
        phone: str | None = None,
        email: str | None = None,
        product_interest: str | None = None,
        budget: int | None = None,
        conversation_context: str = "",
    ) -> LeadCreateResult | None:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ª–∏–¥ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –∏–∑ Avito.

        –®–∞–≥–∏:
        1. –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        2. –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ amoCRM
        3. –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω ‚Äî –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥—ã –∏ –¥–≤–∏–≥–∞–µ–º —Å—Ç–∞—Ç—É—Å
        4. –ï—Å–ª–∏ –ª–∏–¥–æ–≤ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        """
        if not self.service_token:
            logger.error("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ç–æ–∫–µ–Ω Avito –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –õ–∏–¥ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
            return None

        from app.integrations.amocrm.client import get_amocrm_client
        from app.services.crm.lead_qualifier import lead_qualifier

        search_phone = phone or f"avito_user_{chat_id[:8]}"
        last_message = conversation_context.split("\n")[-1] if conversation_context else ""

        logger.info(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ Avito –ª–∏–¥–∞ –¥–ª—è %s (chat_id=%s, phone=%s)",
            user_name,
            chat_id,
            search_phone,
        )

        qualification = await lead_qualifier.qualify_lead(
            conversation_history=conversation_context,
            user_message=conversation_context,
            source="avito",
        )
        logger.info(
            "üìä Avito –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: stage=%s, temp=%s, confidence=%.2f",
            qualification.stage,
            qualification.temperature,
            qualification.confidence,
        )
        logger.debug("Reasoning: %s", qualification.reasoning)

        amocrm_client = await get_amocrm_client()
        contact_id = await amocrm_client.find_contact_by_phone(search_phone)

        if contact_id:
            logger.info("‚úÖ Avito –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω: contact_id=%s", contact_id)
            await self._cache_contact_id(chat_id=chat_id, contact_id=contact_id)

            leads = await amocrm_client.find_leads_by_contact(
                contact_id=contact_id,
                pipeline_id=lead_qualifier.PIPELINE_ID,
            )

            if leads:
                existing_lead = leads[0]
                lead_id = existing_lead["id"]
                current_status_id = existing_lead["status_id"]

                logger.info(
                    "‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π Avito –ª–∏–¥: lead_id=%s, status_id=%s",
                    lead_id,
                    current_status_id,
                )

                should_update = lead_qualifier.should_update_stage(
                    current_status_id=current_status_id,
                    new_status_id=qualification.status_id,
                )

                if should_update:
                    success = await amocrm_client.update_lead_status(
                        lead_id=lead_id,
                        status_id=qualification.status_id,
                        pipeline_id=lead_qualifier.PIPELINE_ID,
                    )

                    if success:
                        logger.info(
                            "‚úÖ Avito –ª–∏–¥ %s –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ —Å—Ç–∞—Ç—É—Å %s (status_id=%s)",
                            lead_id,
                            qualification.stage,
                            qualification.status_id,
                        )
                        await self.save_conversation_to_amocrm(
                            lead_id=lead_id,
                            user_message=last_message,
                            bot_response=None,
                            qualification=qualification,
                        )
                    else:
                        logger.error(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Avito –ª–∏–¥ %s", lead_id
                        )

                    return LeadCreateResult(
                        lead_id=lead_id,
                        contact_id=contact_id,
                        success=success,
                        message=(
                            f"–õ–∏–¥ –æ–±–Ω–æ–≤–ª—ë–Ω: {qualification.stage}"
                            if success
                            else "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                        ),
                    )

                logger.info(
                    "‚è∏Ô∏è  Avito –ª–∏–¥ %s –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ (status_id=%s)",
                    lead_id,
                    current_status_id,
                )
                return LeadCreateResult(
                    lead_id=lead_id,
                    contact_id=contact_id,
                    success=True,
                    message="–õ–∏–¥ –∞–∫—Ç—É–∞–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω",
                )

        logger.info(
            "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Avito –ª–∏–¥–∞ –¥–ª—è %s (–∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)", user_name
        )

        lead_data = {
            "user_name": user_name,
            "phone": search_phone,
            "email": email,
            "source": "avito",
            "product_interest": product_interest or "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
            "budget": budget,
            "conversation_history": conversation_context[:500],
            "pipeline_id": lead_qualifier.PIPELINE_ID,
            "status_id": qualification.status_id,
        }

        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.api_base_url}/api/v1/amocrm/leads",
                    headers={
                        "Authorization": f"Bearer {self.service_token}",
                        "Content-Type": "application/json",
                    },
                    json=lead_data,
                )

            if response.status_code == 200:
                result = response.json()
                lead_id = result.get("lead_id")
                result_contact_id = result.get("contact_id")

                logger.info(
                    "‚úÖ Avito –ª–∏–¥ —Å–æ–∑–¥–∞–Ω: lead_id=%s, contact_id=%s, stage=%s",
                    lead_id,
                    result.get("contact_id"),
                    qualification.stage,
                )
                if lead_id:
                    await self.save_conversation_to_amocrm(
                        lead_id=int(lead_id),
                        user_message=last_message,
                        bot_response=None,
                        qualification=qualification,
                    )
                if result_contact_id:
                    await self._cache_contact_id(
                        chat_id=chat_id,
                        contact_id=result_contact_id,
                    )
                return LeadCreateResult(**result)

            logger.error(
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Avito –ª–∏–¥–∞: %s - %s",
                response.status_code,
                response.text,
            )
            return None

        except Exception as exc:  # noqa: BLE001
            logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Avito –ª–∏–¥–∞: %s", exc)
            return None

    async def get_conversation_history_from_amocrm(self, chat_id: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ amoCRM."""
        from app.integrations.amocrm.client import get_amocrm_client
        from app.services.crm.lead_qualifier import lead_qualifier

        try:
            redis = await get_redis_client()
            contact_cache_key = f"avito:contact_id:{chat_id}"
            cached_contact_id = await redis.get(contact_cache_key)

            amocrm_client = await get_amocrm_client()
            contact_id: int | None = None

            if cached_contact_id:
                if isinstance(cached_contact_id, bytes):
                    cached_contact_id = cached_contact_id.decode()
                try:
                    contact_id = int(cached_contact_id)
                    logger.info(
                        "‚úÖ Avito contact_id %s –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞ –¥–ª—è chat_id=%s",
                        contact_id,
                        chat_id,
                    )
                except ValueError:
                    logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Avito contact_id –≤ –∫—ç—à–µ: %s", cached_contact_id)

            if not contact_id:
                search_phone = f"avito_user_{chat_id[:8]}"
                contact_id = await amocrm_client.find_contact_by_phone(search_phone)

                if contact_id:
                    await redis.setex(
                        contact_cache_key,
                        self.CONTACT_CACHE_TTL,
                        str(contact_id),
                    )
                    logger.info(
                        "‚úÖ Avito contact_id %s –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω",
                        contact_id,
                    )

            if not contact_id:
                logger.debug("Avito –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è chat_id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω", chat_id)
                return ""

            leads = await amocrm_client.find_leads_by_contact(
                contact_id=contact_id,
                pipeline_id=lead_qualifier.PIPELINE_ID,
            )

            if not leads:
                logger.debug("Avito –ª–∏–¥—ã –¥–ª—è contact_id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", contact_id)
                return ""

            lead_id = leads[0]["id"]
            notes = await amocrm_client.get_lead_notes(lead_id=lead_id, limit=10)

            if not notes:
                logger.debug("Avito –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ª–∏–¥–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", lead_id)
                return ""

            logger.info("üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ %s Avito –∑–∞–º–µ—Ç–æ–∫ –∏–∑ amoCRM", len(notes))

            notes_sorted = sorted(notes, key=lambda item: item.get("created_at", 0))
            history_parts: list[str] = []
            skipped_notes = 0

            for note in notes_sorted:
                text = note.get("text", "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–∞ (—Å —ç–º–æ–¥–∑–∏ –∏ –±–µ–∑)
                if (
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" in text
                    or "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" in text
                    or "–û—Ç–≤–µ—Ç –±–æ—Ç–∞:" in text
                    or "ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:" in text
                    or "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:" in text
                ):
                    clean_text = text.strip()
                    clean_text = clean_text.replace("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:", "").strip()
                    
                    # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ reasoning
                    if "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:" in clean_text or "üìä –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:" in clean_text:
                        clean_text = clean_text.split("–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:")[0].strip()
                        clean_text = clean_text.split("üìä –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:")[0].strip()
                    
                    if "Reasoning:" in clean_text or "üí≠ Reasoning:" in clean_text:
                        clean_text = clean_text.split("Reasoning:")[0].strip()
                        clean_text = clean_text.split("üí≠ Reasoning:")[0].strip()
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã (—É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É)
                    clean_text = clean_text.replace("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "–ö–ª–∏–µ–Ω—Ç:")
                    clean_text = clean_text.replace("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "–ö–ª–∏–µ–Ω—Ç:")
                    clean_text = clean_text.replace("ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:", "–ë–æ—Ç:")
                    clean_text = clean_text.replace("–û—Ç–≤–µ—Ç –±–æ—Ç–∞:", "–ë–æ—Ç:")

                    if clean_text.strip():
                        history_parts.append(clean_text.strip())
                else:
                    skipped_notes += 1

            if skipped_notes > 0:
                logger.info("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ %s Avito –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–∞", skipped_notes)

            history = "\n\n".join(history_parts)

            logger.info(
                "‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ Avito –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è chat_id=%s: %s —Å–æ–æ–±—â–µ–Ω–∏–π, %s —Å–∏–º–≤–æ–ª–æ–≤",
                chat_id,
                len(history_parts),
                len(history),
            )

            if history_parts:
                logger.debug("Avito –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", history_parts[0][:150])
            else:
                logger.warning("‚ö†Ô∏è Avito –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞!")

            return history

        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Avito –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ amoCRM: %s", exc)
            return ""

    def should_create_lead(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞."""
        text_lower = text.lower()

        hot_triggers = [
            "–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É",
            "—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å",
            "—Ö–æ—á—É –∫—É–ø–∏—Ç—å",
            "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π",
            "–ø–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ",
            "–∂–¥—É –∑–≤–æ–Ω–∫–∞",
            "–≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å",
            "–∑–∞–∫–∞–∑–∞—Ç—å",
            "–∫—É–ø–∏—Ç—å",
            "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
            "—Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
            "—Å–æ–≥–ª–∞—Å–µ–Ω",
            "—Å–æ–≥–ª–∞—Å–Ω–∞",
            "–ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
            "–∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ–º",
            "–≥–æ—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∞—Ç—å",
            "–æ–ø–ª–∞—Ç–∏—Ç—å",
            "—Å—á—ë—Ç",
            "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
            "–¥–æ–≥–æ–≤–æ—Ä –≥–æ—Ç–æ–≤"
        ]
        price_triggers = ["—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å"]
        readiness_triggers = ["–±–µ—Ä—É", "–ø–æ–∫—É–ø–∞—é", "–∑–∞–∫–∞–∑—ã–≤–∞—é", "—Å–æ–≥–ª–∞—Å–µ–Ω"]

        has_hot_trigger = any(phrase in text_lower for phrase in hot_triggers)
        has_price = any(phrase in text_lower for phrase in price_triggers)
        has_readiness = any(phrase in text_lower for phrase in readiness_triggers)

        return has_hot_trigger or (has_price and has_readiness)

    def extract_product_from_text(self, text: str) -> str | None:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        text_lower = text.lower()
        products = {
            "–∏–∏-–º–µ–Ω–µ–¥–∂–µ—Ä": "AI Manager",
            "ai manager": "AI Manager",
            "–º–µ–Ω–µ–¥–∂–µ—Ä": "AI Manager",
            "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è crm": "AI Manager",
            "–∏–∏-—é—Ä–∏—Å—Ç": "AI Lawyer",
            "ai lawyer": "AI Lawyer",
            "—é—Ä–∏—Å—Ç": "AI Lawyer",
            "—é—Ä–∏–¥–∏—á–µ—Å–∫": "AI Lawyer",
            "–∏–∏-–∞–Ω–∞–ª–∏—Ç–∏–∫": "AI Analyst",
            "ai analyst": "AI Analyst",
            "–∞–Ω–∞–ª–∏—Ç–∏–∫": "AI Analyst",
            "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö": "AI Analyst",
            "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è": "AI Manager",
        }

        for key, product in products.items():
            if key in text_lower:
                return product

        return None


avito_lead_service = AvitoLeadService()
