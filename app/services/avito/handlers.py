"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π Avito."""

from __future__ import annotations

from loguru import logger

from app.utils.text_formatters import format_for_avito


class AvitoMessageHandlers:
    """–ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Avito."""

    @staticmethod
    async def handle_text_message(chat_id: str, text: str, author_id: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ RAG."""
        logger.info(
            "Avito: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ %s –æ—Ç %s: %s",
            chat_id,
            author_id,
            text[:80],
        )

        from app.services.avito.lead_service import avito_lead_service

        amocrm_history = await avito_lead_service.get_conversation_history_from_amocrm(
            chat_id
        )
        if amocrm_history:
            logger.info(
                "üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ Avito –∏—Å—Ç–æ—Ä–∏—è –∏–∑ amoCRM –¥–ª—è chat_id=%s (%s —Å–∏–º–≤–æ–ª–æ–≤)",
                chat_id,
                len(amocrm_history),
            )

        lead_result = None
        user_name = f"Avito User {author_id[:8]}"

        contact_exists = await avito_lead_service.contact_exists(chat_id)

        if not contact_exists:
            logger.info("üéØ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Avito —á–∞—Ç–µ %s, —Å–æ–∑–¥–∞—ë–º –ª–∏–¥", chat_id)
            product_interest = avito_lead_service.extract_product_from_text(text)

            conversation_context = (
                (f"–ò—Å—Ç–æ—Ä–∏—è –∏–∑ amoCRM:\n{amocrm_history}\n\n" if amocrm_history else "")
                + f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}"
            )[:500]

            lead_result = await avito_lead_service.create_lead_from_conversation(
                chat_id=chat_id,
                user_name=user_name,
                product_interest=product_interest,
                conversation_context=conversation_context,
            )

            if lead_result and lead_result.success:
                logger.info(
                    "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π Avito –ª–∏–¥ —Å–æ–∑–¥–∞–Ω: lead_id=%s",
                    lead_result.lead_id,
                )
        else:
            logger.debug("–ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è Avito —á–∞—Ç–∞ %s", chat_id)
            await avito_lead_service.update_lead_from_message(
                chat_id=chat_id,
                message_text=text,
            )

        answer: str

        try:
            from app.services.rag.answer import answer_generator

            if answer_generator.client is None:
                logger.debug(
                    "Avito: RAG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–ª–∏–µ–Ω—Ç LLM –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback."
                )
                answer = AvitoMessageHandlers._get_fallback_response(text)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º generate_answer_with_context –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                generated_answer = await answer_generator.generate_answer_with_context(
                    question=text,  # –ß–∏—Å—Ç—ã–π –≤–æ–ø—Ä–æ—Å –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
                    user_name=user_name,
                    context=None,  # –£ Avito –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏
                    amocrm_history=amocrm_history if amocrm_history else None,
                    platform="avito",
                )
                if not generated_answer or generated_answer.strip() == "":
                    logger.warning(
                        "RAG –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ %s, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback", chat_id
                    )
                    answer = AvitoMessageHandlers._get_fallback_response(text)
                else:
                    answer = generated_answer
                    logger.info(
                        "RAG –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ %s (–¥–ª–∏–Ω–∞: %s)",
                        chat_id,
                        len(answer),
                    )

        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ RAG –¥–ª—è —á–∞—Ç–∞ %s: %s", chat_id, exc)
            answer = AvitoMessageHandlers._get_fallback_response(text)

        answer = format_for_avito(answer)
        logger.info("Avito –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): %s", answer[:100])

        if lead_result and lead_result.success and lead_result.lead_id:
            await avito_lead_service.save_conversation_to_amocrm(
                lead_id=lead_result.lead_id,
                user_message=text,
                bot_response=answer,
                qualification=None,
            )

        return answer

    @staticmethod
    def _get_fallback_response(text: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ RAG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
        text_lower = text.lower()

        if any(word in text_lower for word in ("–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π")):
            return (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n"
                "–Ø ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.\n\n"
                "–£ –Ω–∞—Å –µ—Å—Ç—å:\n"
                "ü§ñ –ò–ò-–ú–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è CRM\n"
                "‚öñÔ∏è –ò–ò-–Æ—Ä–∏—Å—Ç ‚Äî –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
                "üìä –ò–ò-–ê–Ω–∞–ª–∏—Ç–∏–∫ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏?"
            )

        if any(
            word in text_lower for word in ("—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ", "—Ç–∞—Ä–∏—Ñ")
        ):
            return (
                "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–¥–∞—á –∏ –æ–±—ä—ë–º–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è:\n\n"
                "üì¶ –°—Ç–∞—Ä—Ç ‚Äî –æ—Ç 50 000 ‚ÇΩ\n"
                "üöÄ –û–ø—Ç–∏–º—É–º ‚Äî –æ—Ç 150 000 ‚ÇΩ\n"
                "‚≠ê Enterprise ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Ä–∞—Å—á—ë—Ç!"
            )

        if any(
            word in text_lower
            for word in (
                "–∫–æ–Ω—Ç–∞–∫—Ç",
                "—Å–≤—è–∑—å",
                "—Å–≤—è–∑–∞—Ç—å—Å—è",
                "—Ç–µ–ª–µ—Ñ–æ–Ω",
                "email",
                "telegram",
            )
        ):
            return (
                "üìû –° –Ω–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Ç–∞–∫:\n\n"
                "Telegram: @your_bot\n"
                "Email: sales@example.com\n"
                "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n\n"
                "–ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –∏ –∑–¥–µ—Å—å, –µ—Å–ª–∏ —É–¥–æ–±–Ω–æ!"
            )

        return (
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üôè\n\n"
            "–Ø –ø–µ—Ä–µ–¥–∞–ª –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ‚Äî –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –∑–∞–¥–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        )

    @staticmethod
    async def handle_image_message(chat_id: str, image_url: str) -> str:
        """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
        logger.info("Avito: –ø–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç–µ %s (%s).", chat_id, image_url)
        return (
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üì∑\n\n"
            "–ú—ã –∏–∑—É—á–∏–º –µ–≥–æ –∏ –≤–µ—Ä–Ω—ë–º—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
