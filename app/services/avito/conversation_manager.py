"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FSM –¥–∏–∞–ª–æ–≥–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
from __future__ import annotations

import json
from datetime import datetime

from loguru import logger

from app.core.redis_client import get_redis_client
from app.core.settings import settings
from app.models.conversation import (
    ConversationContext,
    ConversationMetadata,
    ConversationState,
    MessageRole,
)
from app.services.avito.data_extractors import (
    NameExtractor,
    NeedExtractor,
    PhoneExtractor,
)
from app.services.avito.lead_summarizer import LeadSummarizer
from app.services.avito.prompt_loader import PromptLoader


class AvitoConversationManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç FSM –¥–∏–∞–ª–æ–≥–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""

    def __init__(self):
        self.name_extractor = NameExtractor()
        self.phone_extractor = PhoneExtractor()
        self.need_extractor = NeedExtractor()
        self.summarizer = LeadSummarizer()
        self.prompt_loader = PromptLoader(
            settings.prompts_dir or "app/services/avito/prompts"
        )
        self.context_ttl = settings.avito_conversation_ttl

    async def handle_message(self, chat_id: str, message: str) -> str:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

        –õ–æ–≥–∏–∫–∞:
        1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Redis
        2. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –±–æ–ª—å)
        3. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        4. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        5. –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω - —Å–æ–∑–¥–∞—Ç—å –ª–∏–¥ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        6. –ò–Ω–∞—á–µ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ Redis
        8. –í–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç
        """
        context = await self.get_context(chat_id)
        context.add_message(MessageRole.USER, message)
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        old_state = context.state
        
        await self._try_extract_data(context, message)
        await self._update_state(context)
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω - —Å–æ–∑–¥–∞–µ–º –ª–∏–¥ –∏ –¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if old_state != ConversationState.PHONE_COLLECTED and context.state == ConversationState.PHONE_COLLECTED:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –≤ —Ñ–æ–Ω–µ (–Ω–µ –∂–¥–µ–º)
            import asyncio
            asyncio.create_task(self._create_lead(context))
            
            context.state = ConversationState.QUALIFIED
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É!)
            bot_response = (
                f"–°–ø–∞—Å–∏–±–æ, {context.user_name}! ‚úÖ\n\n"
                f"–Ø –ø–µ—Ä–µ–¥–∞–ª –≤–∞—à—É –∑–∞—è–≤–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ {context.product_interest or '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏'} ‚Äî "
                f"–æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.\n\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üòä"
            )
        else:
            # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            bot_response = await self._generate_response(context, message)
        
        context.add_message(MessageRole.BOT, bot_response)
        await self.save_context(context)

        return bot_response

    async def _try_extract_data(
        self,
        context: ConversationContext,
        message: str,
    ) -> None:
        """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)."""
        import asyncio
        import time
        
        # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []
        skipped = []
        
        if not context.user_name:
            tasks.append(("name", self.name_extractor.extract(message)))
        else:
            skipped.append("name")

        if not context.phone:
            tasks.append(("phone", self.phone_extractor.extract(message)))
        else:
            skipped.append("phone")

        if not context.pain_point:
            history = context.get_history_text(last_n=5)
            tasks.append(("need", self.need_extractor.extract(history, message)))
        else:
            skipped.append("need")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if skipped:
            logger.info(
                "Avito: –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è %s: %s (—É–∂–µ –µ—Å—Ç—å)",
                context.chat_id,
                ", ".join(skipped)
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if tasks:
            task_types = [t[0] for t in tasks]
            task_coroutines = [t[1] for t in tasks]
            
            logger.info(
                "Avito: –∑–∞–ø—É—Å–∫ %d –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π –¥–ª—è %s: %s",
                len(task_types),
                context.chat_id,
                ", ".join(task_types)
            )
            start_time = time.time()
            results = await asyncio.gather(*task_coroutines, return_exceptions=True)
            elapsed = time.time() - start_time
            logger.info(
                "Avito: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ %.2f —Å–µ–∫",
                elapsed
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for task_type, result in zip(task_types, results):
                if isinstance(result, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è {task_type}: {result}")
                    continue
                
                if task_type == "name":
                    if result.value and result.confidence >= settings.name_extraction_threshold:
                        context.user_name = result.value
                        logger.info(
                            "Avito: –∏–º—è –∏–∑–≤–ª–µ—á–µ–Ω–æ –¥–ª—è %s: %s (confidence: %.2f)",
                            context.chat_id,
                            result.value,
                            result.confidence,
                        )
                
                elif task_type == "phone":
                    if result.value and result.confidence >= settings.phone_extraction_threshold:
                        context.phone = result.value
                        logger.info(
                            "Avito: —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑–≤–ª–µ—á—ë–Ω –¥–ª—è %s: %s",
                            context.chat_id,
                            result.value,
                        )
                
                elif task_type == "need":
                    if (
                        result.value
                        and result.confidence >= settings.need_extraction_threshold
            ):
                        data = json.loads(result.value)
                context.pain_point = data.get("pain_point")
                context.product_interest = data.get("product_interest")
                logger.info(
                    "Avito: –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–ª—è %s: %s",
                    context.chat_id,
                    context.pain_point,
                )

    async def _update_state(self, context: ConversationContext) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        if context.state == ConversationState.START:
            context.state = ConversationState.GREETING
        elif context.state == ConversationState.GREETING:
            # –ì–∏–±–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥: –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å - –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ NEED_IDENTIFIED –¥–∞–∂–µ –±–µ–∑ –∏–º–µ–Ω–∏
            if context.pain_point:
                context.state = ConversationState.NEED_IDENTIFIED
                logger.info(
                    "Avito: –ø–µ—Ä–µ—Ö–æ–¥ GREETING -> NEED_IDENTIFIED (–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –±–µ–∑ –∏–º–µ–Ω–∏)"
                )
            elif context.user_name:
                context.state = ConversationState.NAME_COLLECTED
        elif context.state == ConversationState.NAME_COLLECTED:
            if context.pain_point:
                context.state = ConversationState.NEED_IDENTIFIED
        elif context.state == ConversationState.NEED_IDENTIFIED:
            if context.phone:
                context.state = ConversationState.PHONE_COLLECTED

    async def _generate_response(
        self,
        context: ConversationContext,
        user_message: str,
    ) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        import time
        
        if context.state == ConversationState.QUALIFIED:
            return await self._generate_qualified_response(context, user_message)

        prompt_key = self._get_prompt_key_for_state(context.state)

        try:
            from openai import AsyncOpenAI

            api_key = (
                settings.openai_api_key.get_secret_value()
                if settings.openai_api_key
                else None
            )
            if not api_key:
                logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
                return self._get_fallback_response(context.state, user_message)

            logger.info(
                "Avito: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è %s (state=%s, prompt=%s)",
                context.chat_id,
                context.state.value,
                prompt_key
            )
            start_time = time.time()

            client = AsyncOpenAI(api_key=api_key)

            system, user = self.prompt_loader.get_prompt(
                "conversation.poml",
                prompt_key,
                user_name=context.user_name or "",
                user_message=user_message,
                conversation_history=context.get_history_text(),
                pain_point=context.pain_point or "",
                product_interest=context.product_interest or "",
            )

            response = await client.chat.completions.create(
                model=settings.openai_conversation_model,
                messages=[
                    {"role": "system", "content": system},
                    {"role": "user", "content": user},
                ],
            )

            elapsed = time.time() - start_time
            logger.info(
                "Avito: –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ %.2f —Å–µ–∫ (–º–æ–¥–µ–ª—å: %s)",
                elapsed,
                settings.openai_conversation_model
            )

            return response.choices[0].message.content or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

        except Exception as exc:  # noqa: BLE001
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {exc}")
            return self._get_fallback_response(context.state, user_message)

    def _get_prompt_key_for_state(self, state: ConversationState) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        mapping = {
            ConversationState.GREETING: "greeting",
            ConversationState.NAME_COLLECTED: "name_collected",
            ConversationState.NEED_IDENTIFIED: "need_identified",
            ConversationState.PHONE_COLLECTED: "qualified",
        }
        return mapping.get(state, "greeting")

    async def _generate_qualified_response(
        self,
        context: ConversationContext,
        user_message: str,
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç qualified —Å RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
        try:
            from app.services.rag.search import document_search
            from openai import AsyncOpenAI

            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ RAG (limit=1 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏, –∫—ç—à —É—Å–∫–æ—Ä—è–µ—Ç)
            documents = await document_search.search(user_message, limit=1)
            rag_context = "\n\n".join(
                f"üìÑ {doc['title']}:\n{doc['content'][:300]}"
                for doc in documents
            ) if documents else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç qualified –∏–∑ conversation.poml
            api_key = (
                settings.openai_api_key.get_secret_value()
                if settings.openai_api_key
                else None
            )
            if not api_key:
                return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

            client = AsyncOpenAI(api_key=api_key)

            system, user = self.prompt_loader.get_prompt(
                "conversation.poml",
                "qualified",
                user_name=context.user_name or "–ö–ª–∏–µ–Ω—Ç",
                phone=context.phone or "",
                product_interest=context.product_interest or "",
                user_message=user_message,
                rag_context=rag_context,
            )

            response = await client.chat.completions.create(
                model=settings.openai_conversation_model,
                messages=[
                    {"role": "system", "content": system},
                    {"role": "user", "content": user},
                ],
            )

            return response.choices[0].message.content or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

        except Exception as exc:  # noqa: BLE001
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ qualified –æ—Ç–≤–µ—Ç–∞: {exc}")
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

    def _get_fallback_response(
        self,
        state: ConversationState,
        message: str,  # noqa: ARG002 - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    ) -> str:
        """Fallback –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
        if state == ConversationState.GREETING:
            return (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n"
                "–Ø ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.\n"
                "–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
            )
        if state == ConversationState.NAME_COLLECTED:
            return (
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:\n"
                "- –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å?\n"
                "- –ß—Ç–æ —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏?"
            )
        if state == ConversationState.NEED_IDENTIFIED:
            return (
                "–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.\n"
                "–ß—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, "
                "–æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
            )

        return "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!"

    async def _create_lead(self, context: ConversationContext) -> None:
        """–°–æ–∑–¥–∞—Ç—å –ª–∏–¥ –≤ amoCRM —Å —Å–∞–º–º–∞—Ä–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."""
        try:
            from app.services.avito.lead_service import avito_lead_service

            summary = await self.summarizer.generate_summary(context)
            recommendations = await self.summarizer.generate_recommendations(context)
            conversation_text = context.get_history_text()

            await avito_lead_service.create_lead_from_conversation(
                chat_id=context.chat_id,
                user_name=context.user_name or "–ö–ª–∏–µ–Ω—Ç Avito",
                phone=context.phone,
                email=context.email,
                product_interest=context.product_interest,
                pain_point=context.pain_point,
                conversation_context=(
                    f"{conversation_text}\n\n{summary}\n\n{recommendations}"
                ),
            )

            logger.info("‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è Avito —á–∞—Ç–∞ %s", context.chat_id)

        except Exception as exc:  # noqa: BLE001
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞: {exc}")

    async def get_context(self, chat_id: str) -> ConversationContext:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Redis."""
        redis = await get_redis_client()
        cache_key = f"avito:conversation:{chat_id}"
        cached = await redis.get(cache_key)

        if cached:
            if isinstance(cached, bytes):
                cached = cached.decode()
            data = json.loads(cached)
            return ConversationContext(**data)

        return ConversationContext(
            chat_id=chat_id,
            state=ConversationState.START,
            metadata=ConversationMetadata(
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow(),
            ),
        )

    async def save_context(self, context: ConversationContext) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ Redis."""
        redis = await get_redis_client()
        cache_key = f"avito:conversation:{context.chat_id}"
        data = context.model_dump_json()
        await redis.setex(cache_key, self.context_ttl, data)


conversation_manager = AvitoConversationManager()

