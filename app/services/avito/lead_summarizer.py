"""–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
from __future__ import annotations

from loguru import logger
from openai import AsyncOpenAI

from app.core.settings import settings
from app.models.conversation import ConversationContext
from app.services.avito.prompt_loader import PromptLoader


class LeadSummarizer:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""

    def __init__(self):
        self.client: AsyncOpenAI | None = None
        api_key = (
            settings.openai_api_key.get_secret_value()
            if settings.openai_api_key
            else None
        )
        if api_key:
            self.client = AsyncOpenAI(api_key=api_key)

        self.prompt_loader = PromptLoader(
            settings.prompts_dir or "app/services/avito/prompts"
        )

    async def generate_summary(self, context: ConversationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞."""
        if not self.client:
            return self._fallback_summary(context)

        try:
            system, user = self.prompt_loader.get_prompt(
                "summarization.poml",
                "conversation_summary",
                conversation_history=context.get_history_text(),
                user_name=context.user_name or "",
                phone=context.phone or "",
                email=context.email or "",
                pain_point=context.pain_point or "",
                product_interest=context.product_interest or "",
            )

            response = await self.client.chat.completions.create(
                model=settings.openai_summarization_model,
                messages=[
                    {"role": "system", "content": system},
                    {"role": "user", "content": user},
                ],
            )

            return (
                response.choices[0].message.content
                or self._fallback_summary(context)
            )

        except Exception as exc:  # noqa: BLE001
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {exc}")
            return self._fallback_summary(context)

    async def generate_recommendations(self, context: ConversationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É."""
        if not self.client:
            return self._fallback_recommendations(context)

        try:
            system, user = self.prompt_loader.get_prompt(
                "summarization.poml",
                "manager_recommendations",
                user_name=context.user_name or "",
                pain_point=context.pain_point or "",
                product_interest=context.product_interest or "",
                conversation_history=context.get_history_text(),
                lead_temperature="–¢—ë–ø–ª—ã–π",
            )

            response = await self.client.chat.completions.create(
                model=settings.openai_summarization_model,
                messages=[
                    {"role": "system", "content": system},
                    {"role": "user", "content": user},
                ],
            )

            return (
                response.choices[0].message.content
                or self._fallback_recommendations(context)
            )

        except Exception as exc:  # noqa: BLE001
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {exc}")
            return self._fallback_recommendations(context)

    def _fallback_summary(self, context: ConversationContext) -> str:
        """Fallback —Å–∞–º–º–∞—Ä–∏."""
        return f"""
–°–ê–ú–ú–ê–†–ò –î–ò–ê–õ–û–ì–ê

üë§ –ö–ª–∏–µ–Ω—Ç: {context.user_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"}

üéØ –û–°–ù–û–í–ù–ê–Ø –ë–û–õ–¨:
{context.pain_point or "–ù–µ –≤—ã—è–≤–ª–µ–Ω–∞"}

üí° –ò–ù–¢–ï–†–ï–° –ö –ü–†–û–î–£–ö–¢–£:
{context.product_interest or "–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"}

üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê –õ–ò–î–ê: –¢—ë–ø–ª—ã–π
–ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã, –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É.
"""

    def _fallback_recommendations(self, context: ConversationContext) -> str:
        """Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
        return f"""
–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ú–ï–ù–ï–î–ñ–ï–†–£

üéØ –ì–õ–ê–í–ù–´–ô –§–û–ö–£–° –ó–í–û–ù–ö–ê:
–û–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É: {context.pain_point or "–Ω–µ –≤—ã—è–≤–ª–µ–Ω–∞"}

üí¨ OPENING:
"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {context.user_name}! –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ {context.product_interest or '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é'}.
–£–¥–æ–±–Ω–æ —Å–µ–π—á–∞—Å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"

üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
- –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
"""


lead_summarizer = LeadSummarizer()
