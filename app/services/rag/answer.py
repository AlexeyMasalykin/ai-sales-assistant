"""–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ GPT —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ RAG."""

from __future__ import annotations

from loguru import logger
from openai import AsyncOpenAI
from openai.types.chat import (
    ChatCompletionAssistantMessageParam,
    ChatCompletionMessageParam,
    ChatCompletionSystemMessageParam,
    ChatCompletionUserMessageParam,
)
from textwrap import shorten
from typing import Dict, List, Optional, Sequence

from app.core.settings import settings
from app.services.rag.search import document_search


class AnswerGenerator:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π."""

    def __init__(self) -> None:
        self.client: Optional[AsyncOpenAI]
        api_key = settings.openai_api_key
        if api_key:
            self.client = AsyncOpenAI(api_key=api_key.get_secret_value())
        else:
            self.client = None
            logger.warning("OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

        self.model = settings.openai_model

    async def generate_answer(self, question: str, user_name: str = "–î—Ä—É–≥") -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è RAG."""
        if not self.client:
            return await self._generate_offline_answer(question, user_name)

        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '%s'.", question[:50])

        documents = await document_search.search(question, limit=3)
        if not documents:
            return (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. "
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
            )

        context = "\n\n".join(
            f"**{doc['title']}**\n{doc['content']}" for doc in documents
        )

        system_prompt = f"""–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏.

–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô:
{context}

–ü–†–ê–í–ò–õ–ê:
- –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
- –û–±—Ä–∞—â–∞–π—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏: {user_name}
- –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –¥–ª—è Telegram (HTML: <b>, <i>)
- –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)
"""

        try:
            messages: List[ChatCompletionMessageParam] = [
                ChatCompletionSystemMessageParam(
                    role="system",
                    content=system_prompt,
                ),
                ChatCompletionUserMessageParam(role="user", content=question),
            ]
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                temperature=0.7,
                max_tokens=500,
            )
        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {}", exc)
            return (
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            )

        answer_raw = response.choices[0].message.content
        if answer_raw is None:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
        answer = str(answer_raw)
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞)
        if "<b>" not in answer and "<i>" not in answer:
            answer = f"<b>{answer}</b>"
        logger.info("–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (%s —Å–∏–º–≤–æ–ª–æ–≤).", len(answer))
        return answer

    async def generate_answer_with_context(
        self,
        question: str,
        user_name: str,
        context: Sequence[Dict[str, str]] | None = None,
        amocrm_history: str | None = None,
        platform: str = "telegram",
    ) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, —É—á–∏—Ç—ã–≤–∞—è –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏."""
        if not self.client:
            return await self._generate_offline_answer(question, user_name)

        logger.info(
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è '%s' (–∏—Å—Ç–æ—Ä–∏—è: %d —Å–æ–æ–±—â–µ–Ω–∏–π, amoCRM: %s)",
            question,
            len(context) if context else 0,
            "–¥–∞" if amocrm_history else "–Ω–µ—Ç",
        )

        documents = await document_search.search(question, limit=3)
        if not documents:
            return (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. "
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
            )

        knowledge_context = "\n\n".join(
            f"–î–æ–∫—É–º–µ–Ω—Ç: {doc['title']}\n{doc['content'][:500]}" for doc in documents
        )
        
        if platform == "telegram":
            formatting_instruction = "–ò—Å–ø–æ–ª—å–∑—É–π HTML —Ç–µ–≥–∏: <b>, <i>, <a>"
        elif platform == "avito":
            formatting_instruction = "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML —Ç–µ–≥–∏, —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç"
        else:
            formatting_instruction = "–ò—Å–ø–æ–ª—å–∑—É–π HTML —Ç–µ–≥–∏: <b>, <i>, <a>"

        system_prompt = (
            f"–¢—ã ‚Äî AI Sales Assistant –∫–æ–º–ø–∞–Ω–∏–∏, "
            f"—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–π—Å—è –Ω–∞ AI-—Ä–µ—à–µ–Ω–∏—è—Ö.\n\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{knowledge_context}\n\n"
        )
        
        # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –ò–°–¢–û–†–ò–Æ –í –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢
        if amocrm_history:
            system_prompt += (
                f"\n\nüìö –ò–°–¢–û–†–ò–Ø –ü–†–ï–î–´–î–£–©–ò–• –û–ë–°–£–ñ–î–ï–ù–ò–ô –° –ö–õ–ò–ï–ù–¢–û–ú:\n"
                f"{amocrm_history}\n\n"
                f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ! "
                f"–°—Å—ã–ª–∞–π—Å—è –Ω–∞ —Ç–æ, —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–∏ —Ä–∞–Ω–µ–µ. "
                f"–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç \"–æ —á—ë–º –º—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å\" –∏–ª–∏ \"—á—Ç–æ –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏\" ‚Äî "
                f"–∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—à–µ!\n\n"
            )
            logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: %d —Å–∏–º–≤–æ–ª–æ–≤", len(amocrm_history))
        
        system_prompt += (
            f"–ü–†–ê–í–ò–õ–ê:\n"
            f"- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É\n"
            f"- –û–±—Ä–∞—â–∞–π—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏: {user_name}\n"
            f"- {formatting_instruction}\n"
            f"- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n"
            f"- –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        )
        
        messages: List[ChatCompletionMessageParam] = [
            ChatCompletionSystemMessageParam(
                role="system",
                content=system_prompt,
            ),
        ]

        if context:
            for item in context:
                role = item.get("role", "user")
                content = item.get("content", "")
                if role == "assistant":
                    messages.append(
                        ChatCompletionAssistantMessageParam(
                            role="assistant",
                            content=content,
                        ),
                    )
                else:
                    messages.append(
                        ChatCompletionUserMessageParam(role="user", content=content),
                    )

        messages.append(ChatCompletionUserMessageParam(role="user", content=question))

        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                max_tokens=500,
                temperature=0.7,
            )
        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: {}", exc)
            return (
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            )

        answer_raw = response.choices[0].message.content
        if answer_raw is None:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
        answer = str(answer_raw).strip()

        if platform != "avito" and "<b>" not in answer and "<i>" not in answer:
            answer = f"<b>{user_name}</b>, {answer}"

        logger.info("–û—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (%d —Å–∏–º–≤–æ–ª–æ–≤)", len(answer))

        return answer

    async def _generate_offline_answer(self, question: str, user_name: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —ç—Ö–æ-–æ—Ç–≤–µ—Ç –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ LLM."""
        documents = await document_search.search(question, limit=2)
        intro = (
            f"<b>{user_name}</b>, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
        )
        if not documents:
            return (
                intro + "\n\n–°–µ–π—á–∞—Å –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. "
                "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ä–Ω—ë—Ç—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏."
            )

        snippets: List[str] = []
        for doc in documents:
            content = doc.get("content", "")
            snippet = shorten(content.replace("\n", " "), width=280, placeholder="...")
            title = doc.get("title", "–î–æ–∫—É–º–µ–Ω—Ç")
            snippets.append(f"<b>{title}</b>: {snippet}")

        body = "\n\n".join(snippets)
        recommendation = (
            "\n\n–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è, "
            "–Ω–∞–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."
        )
        return intro + "\n\n" + body + recommendation


answer_generator = AnswerGenerator()
