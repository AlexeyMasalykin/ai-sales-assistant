#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ Avito –∏–∑ Redis.

–£–¥–∞–ª—è–µ—Ç:
- avito:conversation:* - –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
- avito:contact_id:* - –∫—ç—à –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

–ù–ï —É–¥–∞–ª—è–µ—Ç:
- amocrm:tokens - OAuth —Ç–æ–∫–µ–Ω—ã amoCRM
- telegram:* - –¥–∞–Ω–Ω—ã–µ Telegram
- –î—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/clear_conversations.py
    # –∏–ª–∏ –≤ Docker:
    docker-compose exec -T app python scripts/clear_conversations.py
"""

import asyncio
import sys

from loguru import logger

from app.core.redis_client import get_redis_client


async def clear_conversations():
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ Avito –∏–∑ Redis."""
    redis = await get_redis_client()
    
    logger.info("="*70)
    logger.info("üßπ –û–ß–ò–°–¢–ö–ê –ò–°–¢–û–†–ò–ò –î–ò–ê–õ–û–ì–û–í AVITO")
    logger.info("="*70)
    
    patterns_to_delete = [
        "avito:conversation:*",
        "avito:contact_id:*",
    ]
    
    total_deleted = 0
    details = {}
    
    for pattern in patterns_to_delete:
        logger.info(f"\nüîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–π: {pattern}")
        
        cursor = 0
        keys_batch = []
        
        while True:
            cursor, keys = await redis.scan(cursor, match=pattern, count=100)
            keys_batch.extend(keys)
            
            if cursor == 0:
                break
        
        if keys_batch:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(keys_batch)} –∫–ª—é—á–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã (–ø–µ—Ä–≤—ã–µ 5)
            if len(keys_batch) <= 5:
                for key in keys_batch:
                    logger.info(f"   - {key}")
            else:
                for key in keys_batch[:3]:
                    logger.info(f"   - {key}")
                logger.info(f"   ... –∏ –µ—â–µ {len(keys_batch) - 3} –∫–ª—é—á–µ–π")
            
            # –£–¥–∞–ª—è–µ–º
            for key in keys_batch:
                await redis.delete(key)
                total_deleted += 1
            
            details[pattern] = len(keys_batch)
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(keys_batch)} –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {pattern}")
        else:
            logger.info(f"‚ÑπÔ∏è  –ö–ª—é—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {pattern}")
            details[pattern] = 0
    
    logger.info("")
    logger.info("="*70)
    logger.info(f"üéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    logger.info("="*70)
    logger.info(f"–í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {total_deleted} –∫–ª—é—á–µ–π")
    
    for pattern, count in details.items():
        logger.info(f"  {pattern}: {count} –∫–ª—é—á–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã amoCRM –æ—Å—Ç–∞–ª–∏—Å—å
    logger.info("")
    amocrm_tokens = await redis.get("amocrm:tokens")
    if amocrm_tokens:
        logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã amoCRM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç–∞)")
    else:
        logger.warning("‚ö†Ô∏è  –¢–æ–∫–µ–Ω—ã amoCRM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –±—ã–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)")
    
    logger.info("="*70)
    logger.info("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
    logger.info("="*70)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        await clear_conversations()
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as exc:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())

