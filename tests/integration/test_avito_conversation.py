"""–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã FSM –¥–∏–∞–ª–æ–≥–∞."""
from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from app.models.conversation import ConversationState
from app.services.avito.conversation_manager import AvitoConversationManager


def create_mock_openai_client():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    call_count = {"count": 0}

    async def mock_create(*args, **kwargs):
        messages = kwargs.get("messages", [])
        system_content = messages[0].get("content", "") if messages else ""
        user_content = messages[1].get("content", "") if len(messages) > 1 else ""

        mock_message = MagicMock()

        # Extraction –∑–∞–ø—Ä–æ—Å—ã (JSON response)
        if "—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é" in system_content.lower():
            if "–∏–º—ë–Ω" in system_content.lower():
                if "–ò–≤–∞–Ω" in user_content:
                    mock_message.content = (
                        '{"name": "–ò–≤–∞–Ω", "confidence": 0.95, "reasoning": "–Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –∏–º–µ–Ω–∏"}'
                    )
                else:
                    mock_message.content = (
                        '{"name": null, "confidence": 0.0, "reasoning": "–ò–º–µ–Ω–∏ –Ω–µ—Ç"}'
                    )
            elif "–±–æ–ª–µ–π –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π" in system_content.lower():
                if "CRM" in user_content or "crm" in user_content.lower():
                    mock_message.content = '{"pain_point": "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Ç—Ä–∞—Ç—è—Ç 2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å –Ω–∞ CRM", "product_interest": "AI Manager", "confidence": 0.9, "reasoning": "–ß—ë—Ç–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å CRM"}'
                else:
                    mock_message.content = (
                        '{"pain_point": null, "product_interest": null, "confidence": 0.0, "reasoning": "–ë–æ–ª—å –Ω–µ –≤—ã—è–≤–ª–µ–Ω–∞"}'
                    )
        # Conversation –∑–∞–ø—Ä–æ—Å—ã (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
        else:
            call_count["count"] += 1
            if call_count["count"] == 1:
                mock_message.content = (
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö–∞–∫ –º–Ω–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
                )
            elif call_count["count"] == 2:
                mock_message.content = "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –ò–≤–∞–Ω! üòä –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å?"
            elif call_count["count"] == 3:
                mock_message.content = "–ü–æ–Ω–∏–º–∞—é –≤–∞—Å, –ò–≤–∞–Ω. –†—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å CRM ‚Äî —ç—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ß—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω."
            else:
                mock_message.content = "–°–ø–∞—Å–∏–±–æ, –ò–≤–∞–Ω! ‚úÖ –Ø –ø–µ—Ä–µ–¥–∞–ª –≤–∞—à—É –∑–∞—è–≤–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ‚Äî –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞."

        mock_choice = MagicMock()
        mock_choice.message = mock_message
        mock_response = MagicMock()
        mock_response.choices = [mock_choice]
        return mock_response

    mock_client = MagicMock()
    mock_client.chat.completions.create = mock_create
    return MagicMock(return_value=mock_client)


@pytest.mark.asyncio
async def test_full_conversation_flow(fake_redis):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ª–∏–¥–∞."""
    mock_async_openai = create_mock_openai_client()

    with patch("openai.AsyncOpenAI", mock_async_openai):
    manager = AvitoConversationManager()
    chat_id = "test_chat_integration"

        # –®–∞–≥ 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    response1 = await manager.handle_message(
        chat_id,
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
    )
    assert "–æ–±—Ä–∞—â–∞—Ç—å—Å—è" in response1.lower()

    context = await manager.get_context(chat_id)
    assert context.state == ConversationState.GREETING

        # –®–∞–≥ 2: –ò–º—è
    response2 = await manager.handle_message(chat_id, "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω")
    assert "–∏–≤–∞–Ω" in response2.lower()

    context = await manager.get_context(chat_id)
    assert context.state == ConversationState.NAME_COLLECTED
    assert context.user_name == "–ò–≤–∞–Ω"

        # –®–∞–≥ 3: –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
    response3 = await manager.handle_message(
        chat_id,
        "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Ç—Ä–∞—Ç—è—Ç 2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å –Ω–∞ CRM",
    )

    context = await manager.get_context(chat_id)
    assert context.state == ConversationState.NEED_IDENTIFIED
    assert context.pain_point is not None

        # –®–∞–≥ 4: –¢–µ–ª–µ—Ñ–æ–Ω
    response4 = await manager.handle_message(chat_id, "+7 999 123-45-67")
    assert "–ø–µ—Ä–µ–¥–∞–ª" in response4.lower() or "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" in response4.lower()

    context = await manager.get_context(chat_id)
    assert context.state == ConversationState.QUALIFIED
    assert context.phone == "+79991234567"

        # –û—á–∏—Å—Ç–∫–∞
        await fake_redis.delete(f"avito:conversation:{chat_id}")
